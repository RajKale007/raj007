#include <iostream>
#include <vector>
#include <string>
#include <iomanip>
using namespace std;
class Student {
    string name;
    int id;
    vector<double> grades;
public:
    Student(string n, int i) : name(n), id(i) {}  
    void addGrade(double g) {
        if (g >= 0 && g <= 100) grades.push_back(g);
        else cout << "Invalid grade (0-100)!\n";
    }   
    double getAverage() const {
        if (grades.empty()) return 0.0;
        double sum = 0;
        for (double g : grades) sum += g;
        return sum / grades.size();
    }  
   char getLetterGrade() const {
        double avg = getAverage();
        if (avg >= 90) return 'A';
        if (avg >= 80) return 'B';
        if (avg >= 70) return 'C';
        return avg >= 60 ? 'D' : 'F';
    }  
    void display() const {
        cout << "\n--- Student Info ---\nName: " << name << "\nID: " << id 
             << "\nGrades: ";
        for (double g : grades) cout << g << " ";
        if (grades.empty()) cout << "None";
        else cout << "\nAverage: " << fixed << setprecision(2) << getAverage() 
                  << "\nLetter: " << getLetterGrade();
        cout << endl;
    }    
    string getName() const { return name; }
    int getId() const { return id; }
    bool hasGrades() const { return !grades.empty(); }
};
class GradeManager {
    vector<Student> students;  
    bool isUnique(int id) const {
        for (auto& s : students) 
            if (s.getId() == id) return false;
        return true;
    }  
    Student* findStudent(int id) {
        for (auto& s : students) 
            if (s.getId() == id) return &s;
        return nullptr;
    }
public:
    void addStudent() {
        string name;
        int id;
        cout << "Name: ";
        cin.ignore();
        getline(cin, name);
        cout << "ID: ";
        cin >> id;
        if (!isUnique(id)) cout << "ID exists!\n";
        else {
            students.push_back(Student(name, id));
            cout << "Student added!\n";
        }
    }
     void addGrade() {
        if (students.empty()) {
            cout << "No students!\n";
            return;
        }
        int id; double grade;
        cout << "Student ID: ";
        cin >> id;
        Student* s = findStudent(id);
        if (!s) cout << "Not found!\n";
        else {
            cout << "Grade for " << s->getName() << ": ";
            cin >> grade;
            s->addGrade(grade);
        }
    }  
    void showAll() const {
        if (students.empty()) cout << "No students!\n";
        else for (auto& s : students) s.display();
    }  
    void showStudent() const {
        if (students.empty()) {
            cout << "No students!\n";
            return;
        }
        int id;
        cout << "Student ID: ";
        cin >> id;
        for (auto& s : students) {
            if (s.getId() == id) {
                s.display();
                return;
            }
        }
        cout << "Not found!\n";
    }  
    void showStats() const {
        if (students.empty()) {
            cout << "No students!\n";
            return;
        }
        double total = 0, high = 0, low = 100;
        string top, bottom;
        int withGrades = 0;   
        for (auto& s : students) {
            if (s.hasGrades()) {
                double avg = s.getAverage();
                total += avg;
                withGrades++;
                if (avg > high) { high = avg; top = s.getName(); }
                if (avg < low) { low = avg; bottom = s.getName(); }
            }
        }     
        if (withGrades) {
            cout << "\n=== Statistics ===\nAverage: " << fixed << setprecision(2) 
                 << total/withGrades << "\nHighest: " << high << " (" << top << ")"
                 << "\nLowest: " << low << " (" << bottom << ")\nTotal: " 
                 << students.size() << "\nWith Grades: " << withGrades << endl;
        } else cout << "No grades entered!\n";
    }   
    void removeStudent() {
        if (students.empty()) {
            cout << "No students!\n";
            return;
        }
        int id;
        cout << "ID to remove: ";
        cin >> id;
        for (auto it = students.begin(); it != students.end(); ++it) {
            if (it->getId() == id) {
                cout << "Removed " << it->getName() << endl;
                students.erase(it);
                return;
            }
        }
        cout << "Not found!\n";
    }
};
int main() {
    GradeManager gm;
    int choice; 
    do {
        cout << "\n1. Add Student\n2. Add Grade\n3. Show All\n4. Find Student"
             << "\n5. Statistics\n6. Remove Student\n7. Exit\nChoice: ";
        cin >> choice;     
        switch(choice) {
            case 1: gm.addStudent(); break;
            case 2: gm.addGrade(); break;
            case 3: gm.showAll(); break;
            case 4: gm.showStudent(); break;
            case 5: gm.showStats(); break;
            case 6: gm.removeStudent(); break;
            case 7: cout << "Goodbye!\n"; break;
            default: cout << "Invalid!\n";
        }
    } while (choice != 7);    
    return 0;
}
